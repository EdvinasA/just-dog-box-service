service: nodejs
frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  stage: dev
  region: eu-west-1
  runtime: nodejs18.x

package:
  excludeDevDependencies: false

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SubscriptionsToEmail:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SubscriptionToEmail
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Animal:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Animal
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getUser:
    handler: lib/user/controller.getUser
    events:
      - httpApi:
          path: /
          method: get
  registerUser:
    handler: lib/user/register-user/controller.register
    events:
      - httpApi:
          path: /register
          method: post
  loginUser:
    handler: lib/user/login/controller.login
    events:
      - httpApi:
          path: /login
          method: post
  subscribeToEmail:
    handler: lib/user/subscription/controller.subscribe
    events:
      - httpApi:
          path: /subscribe
          method: post
  updateUser:
    handler: lib/user/update-user/controller.updateUser
    events:
      - httpApi:
          path: /update
          method: put
  changePassword:
    handler: lib/user/change-password/controller.changePassword
    events:
      - httpApi:
          path: /password
          method: put
  addAnimal:
    handler: lib/animal/add-animal/controller.handler
    events:
      - httpApi:
          path: /animal
          method: post
