service: nodejs
frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  stage: dev
  region: eu-west-1
  runtime: nodejs18.x

package:
  excludeDevDependencies: false

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SubscriptionToEmail:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SubscriptionsToEmail
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  getUser:
    handler: lib/user/controller.getUser
    events:
      - httpApi:
          path: /{email}
          method: get
  registerUser:
    handler: lib/user/register-user/controller.register
    events:
      - httpApi:
          path: /register
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  loginUser:
    handler: lib/user/login/controller.login
    events:
      - httpApi:
          path: /login
          method: post
          cors:
            origin: "*"
  subscribeToEmail:
    handler: lib/user/subscription/controller.subscribe
    events:
      - httpApi:
          path: /subscribe
          method: post
          cors:
            origin: "*"
